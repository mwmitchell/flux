(ns flux.core
  (:require [flux.client]))

;; This will be used to store a default connection to query against
(defonce _default-connection (atom nil))

(def ^:dynamic *connection* nil)

(defn set-default-connection
  "Set the solr connection that flux should use by default when no
   alternative is specified.
   
   connection
   : connection to solr generated by create"
  [connection]
  (reset! _default-connection connection))

(defmacro with-connection 
  "takes an connection and executes the body with this connection
   
   connection 
   : connection to solr generated by create
   
   & body 
   : all functions to be executed with given connection"
  [connection & body]
  `(binding [*connection* ~connection]
     ~@body))

(defmacro create-fn 
  "function to create those client functions without need of passsing in a connection all time
   
   name
   : name of fn existent in flux.client ns"
  [name]
  `(defn ~name 
     "FN created by macro!
      See: [[flux.client]] for description!"
     [& args#]
     (apply (ns-resolve 'flux.client '~name) (or *connection* @_default-connection) args#)))

(create-fn ping)
(create-fn add)
(create-fn query)
(create-fn request)
(create-fn commit)
(create-fn optimize)
(create-fn rollback)
(create-fn delete-by-id)
(create-fn delete-by-query)
(create-fn shutdown)
